<?php

namespace onphp\meta\builders;

use onPHP\core\Base\StaticFactory;
use onPHP\core\Exceptions\UnimplementedFeatureException;
use onPHP\meta\classes\MetaClass;
use onPHP\meta\patterns\AbstractClassPattern;

/***************************************************************************
 *   Copyright (C) 2006-2009 by Konstantin V. Arkhipov                     *
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU Lesser General Public License as        *
 *   published by the Free Software Foundation; either version 3 of the    *
 *   License, or (at your option) any later version.                       *
 *                                                                         *
 ***************************************************************************/

/**
 * @ingroup Builders
 **/
abstract class BaseBuilder extends StaticFactory
{
    public static function build(MetaClass $class)
    {
        throw new UnimplementedFeatureException('i am forgotten method');
    }

    protected static function buildPointers(MetaClass $class)
    {
        $out = null;
        if (!$class->getPattern() instanceof AbstractClassPattern) {
            if ($source = $class->getSourceLink()) {
                $out .= "\tprotected \$linkName =  '{$source}';\n\t\n";
            }
            if ($class->getIdentifier()->getColumnName() !== 'id') {
                $out .= "public function getIdName()\n{\n\treturn '{$class->getIdentifier()->getColumnName()}';\n}\n";
            }
            $out .= "public function getTable()\n{\n\treturn '{$class->getTableName()}';\n}\n\npublic function getObjectName()\n{\n\treturn '{$class->getName()}';\n}\n\npublic function getSequence()\n{\n\treturn '{$class->getTableName()}_id';\n}";
        } elseif ($class->getWithInternalProperties()) {
            $out .= '// no get{Table,ObjectName,Sequence} for abstract class';
        }
        if ($liaisons = $class->getReferencingClasses()) {
            $uncachers = array();
            foreach ($liaisons as $className) {
                $uncachers[] = $className.'::dao()->uncacheLists();';
            }
            $uncachers = implode('
', $uncachers);
            $out .= "\n\npublic function uncacheLists()\n{\n{$uncachers}\n\nreturn parent::uncacheLists();\n}";
        }
        return $out;
    }

    protected static function getHead()
    {
        $head = self::startCap();
        $head .= ' *   This file is autogenerated - do not edit.'.'                               *';
        return $head.'
'.self::endCap();
    }

    protected static function startCap()
    {
        $version = ONPHP_VERSION;
        $date    = date('Y-m-d H:i:s');
        $info    = " *   Generated by onPHP-{$version} at {$date}";
        $info    = str_pad($info, 77, ' ', STR_PAD_RIGHT).'*';
        $cap     = "<?php\n/*****************************************************************************\n *   Copyright (C) 2006-2009, onPHP's MetaConfiguration Builder.             *\n{$info}\n";
        return $cap;
    }

    protected static function endCap()
    {
        $cap = ' *****************************************************************************/

';
        return $cap;
    }

    protected static function getHeel()
    {
        return '?>';
    }
}